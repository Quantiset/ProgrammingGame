[gd_scene load_steps=16 format=2]

[ext_resource path="res://Assets/fonts/Neon Zone/Neon Zone.otf" type="DynamicFontData" id=1]
[ext_resource path="res://Scripts/MenuButton.gd" type="Script" id=2]
[ext_resource path="res://Assets/MenuButtonEnabled.png" type="Texture" id=3]
[ext_resource path="res://Assets/MenuButton.png" type="Texture" id=4]
[ext_resource path="res://Assets/fonts/Neon Zone/Neon Zone Italic.otf" type="DynamicFontData" id=5]
[ext_resource path="res://icon.png" type="Texture" id=6]
[ext_resource path="res://Scenes/Options.tscn" type="PackedScene" id=7]
[ext_resource path="res://Scripts/MainMenu.gd" type="Script" id=8]
[ext_resource path="res://Scenes/Block.tscn" type="PackedScene" id=9]

[sub_resource type="DynamicFont" id=1]
size = 107
font_data = ExtResource( 1 )

[sub_resource type="DynamicFont" id=2]
size = 40
font_data = ExtResource( 5 )

[sub_resource type="Shader" id=3]
code = "shader_type canvas_item;

////////////////////////////////////////////////////////////////////////////////
//
// Created by Matthew Arcus, 2018
// Wythoff construction for dual snub quadrille tessellation
//
// Fold down to square fundamental region. Draw lines to \"Wythoff point\".
// Keep track of folding for consistent coloring.
//
// Now with extra colors:
// 'c' changes color scheme to one per tile type
// 'r' shows fundamental region
//
////////////////////////////////////////////////////////////////////////////////

const float PI = 3.141592654;
const float TWOPI = 2.0*PI;

vec2 perp(vec2 r) {
  return vec2(-r.y,r.x);
}

int imod(int n, int m) {
  int k = n - n/m*m;
  if (k < 0) return k+m;
  else return k;
}

const int CHAR_C = 67;
const int CHAR_R = 82;
const int CHAR_S = 83;
const int CHAR_Z = 90;


vec3 getcol0(ivec2 s) {
  int i = 2*imod(s.x,2)+imod(s.y,2);
  if (i == 0) return vec3(1,0,0);
  if (i == 1) return vec3(0,1,0);
  if (i == 2) return vec3(0,0,1);
  if (i == 3) return vec3(1,1,0);
  if (i == 4) return vec3(1,0,1);
  if (i == 5) return vec3(0,1,1);
  if (i == 6) return vec3(1,1,1);
  return vec3(1,1,1);
}

vec3 getcol1(ivec2 s) {
  // https://iquilezles.org/articles/palettes
  float t = 0.1*TIME + 0.1*0.618*float(s.x+s.y);
  vec3 a = vec3(0.4);
  vec3 b = vec3(0.6);
  vec3 c = vec3(1,1,1);
  vec3 d = vec3(0,0.33,0.67);
  vec3 col = a + b*cos(TWOPI*(c*t+d));
  return col;
}

vec3 getcol(ivec2 s) {
  return getcol1(s);
}

// segment function by FabriceNeyret2
float segment(vec2 p, vec2 a, vec2 b) {
  vec2 pa = p - a;
  vec2 ba = b - a;
  float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);
  float d = length(pa - ba * h);
  return d;
}

ivec2 nextcell(ivec2 s, int q) {
  q = imod(q,4);
  if (q == 0) s.x++;
  else if (q == 1) s.y--;
  else if (q == 2) s.x--;
  else if (q == 3) s.y++;
  return s;
}

void fragment() {
	vec2 iResolution = 1./SCREEN_PIXEL_SIZE;
	
  float scale = 3.3;
  float lwidth = 0.025;
  // Half the width of the AA line edge
  float awidth = 1.5*scale/iResolution.y;
  vec2 q,p = (2.0*FRAGCOORD.xy-iResolution.xy)/iResolution.y;
  q = mod(0.3*TIME*vec2(1,1.618),2.0);
  q = min(q,2.0-q);
  p *= scale;
  ivec2 s = ivec2(floor(p));
  p = mod(p,2.0)-1.0; // Fold down to Â±1 square
  int parity = int((p.y < 0.0) != (p.x < 0.0)); // Reflection?
  int quad = 2*int(p.x < 0.0) + parity; // Quadrant
  p = abs(p);
  if (parity != 0) p.xy = p.yx;
  // Lines from triangle vertices to Wythoff point
  float d = 1e8;
  d = min(d,segment(p,vec2(0,0),q));
  d = min(d,segment(p,vec2(1,0),q));
  d = min(d,segment(p,vec2(1,1),q));
  d = min(d,segment(p,vec2(-q.y,q.x),vec2(q.y,-q.x)));
  d = min(d,segment(p,vec2(-q.y,q.x),vec2(q.y,2.0-q.x)));
  d = min(d,segment(p,vec2(2.0-q.y,q.x),vec2(q.y,2.0-q.x)));
  // Color - what side of the lines are we?
  float a = dot(p-q,perp(vec2(0,0)-q));
  float b = dot(p-q,perp(vec2(1,0)-q));
  float c = dot(p-q,perp(vec2(1,1)-q));
  bool unit = s == ivec2(0);
  if (b > 0.0) {
    if (c < 0.0) s = nextcell(s,quad);
  } else {
    if (a > 0.0) s = nextcell(s,quad+1);
  }
  vec3 col = vec3(1.);
  col = mix(col,vec3(1),0.1);
  col *= 0.75;
  col = mix(vec3(0),col,smoothstep(lwidth-awidth,lwidth+awidth,d));

  COLOR = vec4(1.0-sqrt(col),1.0);
}
"

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 3 )

[sub_resource type="Environment" id=5]
background_mode = 4
glow_enabled = true
glow_bloom = 0.1
glow_blend_mode = 0
glow_bicubic_upscale = true

[sub_resource type="Gradient" id=6]
offsets = PoolRealArray( 0, 0.291829, 1 )
colors = PoolColorArray( 1, 1, 1, 0, 1, 1, 1, 0.918288, 1, 1, 1, 1 )

[node name="MainMenu" type="VSplitContainer"]
margin_right = 1920.0
margin_bottom = 1080.0
rect_pivot_offset = Vector2( -1840, -480 )
collapsed = true
script = ExtResource( 8 )

[node name="Polygon2D" type="Polygon2D" parent="."]
position = Vector2( -160, -44 )
color = Color( 0.0352941, 0.101961, 0.152941, 0.72549 )
polygon = PoolVector2Array( 720, 24, 800, 184, 1440, 184, 1520, 24 )

[node name="Line2D" type="Line2D" parent="Polygon2D"]
position = Vector2( -801, -20 )
points = PoolVector2Array( 1521, 44, 1601, 204, 2241, 204, 2321, 44, 1521, 44 )
width = 5.0
default_color = Color( 0.803922, 0.815686, 0.878431, 1 )

[node name="Label" type="Label" parent="."]
margin_right = 1920.0
margin_bottom = 116.0
custom_fonts/font = SubResource( 1 )
text = "Main Menu"
align = 1
valign = 2

[node name="ColorRect" type="ColorRect" parent="."]
margin_top = 128.0
margin_right = 1920.0
margin_bottom = 1080.0
mouse_filter = 2
color = Color( 1, 1, 1, 0 )

[node name="OptionsButton" type="TextureButton" parent="ColorRect"]
modulate = Color( 0.639216, 0.74902, 1, 1 )
margin_left = 1280.0
margin_top = 32.0
margin_right = 1760.0
margin_bottom = 192.0
texture_normal = ExtResource( 4 )
texture_hover = ExtResource( 3 )
script = ExtResource( 2 )
__meta__ = {
"_edit_group_": true
}

[node name="Label" type="Label" parent="ColorRect/OptionsButton"]
margin_right = 480.0
margin_bottom = 160.0
custom_fonts/font = SubResource( 2 )
text = "Options"
align = 1
valign = 1

[node name="Tween" type="Tween" parent="ColorRect/OptionsButton"]

[node name="StartButton" type="TextureButton" parent="ColorRect"]
modulate = Color( 0.760784, 1, 0.690196, 1 )
margin_left = 879.0
margin_top = 352.0
margin_right = 1359.0
margin_bottom = 512.0
texture_normal = ExtResource( 4 )
texture_hover = ExtResource( 3 )
script = ExtResource( 2 )
__meta__ = {
"_edit_group_": true
}

[node name="Label" type="Label" parent="ColorRect/StartButton"]
margin_right = 480.0
margin_bottom = 160.0
custom_fonts/font = SubResource( 2 )
text = "Start"
align = 1
valign = 1

[node name="Tween" type="Tween" parent="ColorRect/StartButton"]

[node name="QuitButton" type="TextureButton" parent="ColorRect"]
modulate = Color( 1, 0.541176, 0.541176, 1 )
margin_left = 1199.0
margin_top = 672.0
margin_right = 1679.0
margin_bottom = 832.0
texture_normal = ExtResource( 4 )
texture_hover = ExtResource( 3 )
script = ExtResource( 2 )
__meta__ = {
"_edit_group_": true
}

[node name="Label" type="Label" parent="ColorRect/QuitButton"]
margin_right = 480.0
margin_bottom = 160.0
custom_fonts/font = SubResource( 2 )
text = "Quit"
align = 1
valign = 1

[node name="Tween" type="Tween" parent="ColorRect/QuitButton"]

[node name="CanvasLayer" type="ParallaxBackground" parent="."]
layer = -1

[node name="ColorRect2" type="ColorRect" parent="CanvasLayer"]
margin_right = 1920.0
margin_bottom = 1120.0
color = Color( 0.0156863, 0.0117647, 0.027451, 0.356863 )

[node name="ParallaxLayer" type="ParallaxLayer" parent="CanvasLayer"]
modulate = Color( 1, 1, 1, 0.137255 )
motion_mirroring = Vector2( 1980, 1080 )

[node name="Sprite" type="Sprite" parent="CanvasLayer/ParallaxLayer"]
modulate = Color( 0.862745, 0.870588, 0.964706, 0.184314 )
material = SubResource( 4 )
position = Vector2( 960, 520 )
scale = Vector2( 31, 17 )
texture = ExtResource( 6 )

[node name="Options" parent="." instance=ExtResource( 7 )]
visible = false
anchor_right = 0.0
anchor_bottom = 0.0
margin_top = 128.0
margin_right = 1920.0
margin_bottom = 1080.0

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource( 5 )

[node name="Block" parent="." instance=ExtResource( 9 )]
position = Vector2( 400, 560 )

[node name="Sprite" parent="Block" index="1"]
modulate = Color( 1, 0, 0, 1 )
scale = Vector2( 0.5, 0.5 )

[node name="Line2D" type="Line2D" parent="."]
z_index = -1
width = 5.0
default_color = Color( 0.556863, 0.556863, 0.643137, 1 )
gradient = SubResource( 6 )

[connection signal="mouse_entered" from="ColorRect/OptionsButton" to="ColorRect/OptionsButton" method="_on_StartButton_mouse_entered"]
[connection signal="mouse_exited" from="ColorRect/OptionsButton" to="ColorRect/OptionsButton" method="_on_StartButton_mouse_exited"]
[connection signal="pressed" from="ColorRect/OptionsButton" to="ColorRect/OptionsButton" method="button_pressed" binds= [ "Options" ]]
[connection signal="mouse_entered" from="ColorRect/StartButton" to="ColorRect/StartButton" method="_on_StartButton_mouse_entered"]
[connection signal="mouse_exited" from="ColorRect/StartButton" to="ColorRect/StartButton" method="_on_StartButton_mouse_exited"]
[connection signal="pressed" from="ColorRect/StartButton" to="ColorRect/OptionsButton" method="button_pressed" binds= [ "Start" ]]
[connection signal="mouse_entered" from="ColorRect/QuitButton" to="ColorRect/QuitButton" method="_on_StartButton_mouse_entered"]
[connection signal="mouse_exited" from="ColorRect/QuitButton" to="ColorRect/QuitButton" method="_on_StartButton_mouse_exited"]
[connection signal="pressed" from="ColorRect/QuitButton" to="ColorRect/OptionsButton" method="button_pressed" binds= [ "Quit" ]]

[editable path="Block"]
